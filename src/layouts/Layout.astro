---
import type { CollectionEntry } from "astro:content";

interface Props {
  // title: string;
  // file: string;
  // url: string;
  frontmatter: any;
  entry: CollectionEntry<"notes">;
  toc: CollectionEntry<"notes">[];
}

const { entry, toc = [], frontmatter } = Astro.props;
const isIndex = toc[0] && entry?.slug === toc[0]?.slug;
const { BASE_URL } = import.meta.env;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href={`${BASE_URL}/favicon.svg`} />
    <meta name="generator" content={Astro.generator} />
    <title>{frontmatter.title ?? "notes"}</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css"
      integrity="sha384-GvrOXuhMATgEsSwCs4smul74iXGOixntILdUW9XmUC6+HX0sLNAK3q71HotJqlAn"
      crossorigin="anonymous"
    />
    <!-- <script
      defer
      src="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.js"
      integrity="sha384-cpW21h6RZv/phavutF+AuVYrr+dA8xD9zs6FwLpaCct6O9ctzYFfFr4dgmgccOTx"
      crossorigin="anonymous"></script> -->
    <!-- <script
      defer
      src="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.js"
      integrity="sha384-tMzugJpfLv7v0f+KXzNMqNCC6sVzLMM3sCnZDgzy0lcO/0h3sAkEBg/URFcV0JpE"
      crossorigin="anonymous"></script> -->
    <!-- <script
      defer
      src="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/contrib/auto-render.min.js"
      integrity="sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05"
      crossorigin="anonymous"></script> -->
    <!-- <script defer src=`${BASE_URL}/render.js`></script> -->
  </head>
  <body>
    <div id="container">
      <nav>
        {
          !isIndex && toc[0] && (
            <>
              <a href={`${BASE_URL}/${toc[0].slug}`}>{toc[0].data.title}</a>
              <ol>
                {toc
                  .filter((e) => e.data?.number && e.data?.title)
                  .slice(0)
                  .map((e) => (
                    <li
                      value={e.data.number ?? 0}
                      class={e.slug === entry.slug ? "current" : ""}
                    >
                      <a href={`${BASE_URL}/${e.slug}`}>{e.data.title}</a>
                    </li>
                  ))}
              </ol>
            </>
          )
        }
      </nav>
      <div id="sidebar-placeholder"></div>

      <main>
        <h1>
          {entry?.data.number ? entry.data.number + ". " : ""}{
            entry?.data.title
          }
        </h1>
        <!-- <h3>{entry.slug}</h3> -->
        <slot />
        {
          isIndex && (
            <ol class="toc">
              {toc
                .filter((e) => e.data?.number && e.data?.title)
                .slice(0)
                .map((e) => (
                  <li value={e.data.number ?? 0}>
                    <a href={`${BASE_URL}/${e.slug}`}>{e.data.title}</a>
                  </li>
                ))}
            </ol>
          )
        }
      </main>
    </div>
  </body>
</html>
<style lang="scss" is:global>
  :root {
    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );
    --main-font: "fbb", serif;
    --min-math-size: 12px;
    --min-text-size: 15px;
    --max-text-size: 22px;
    --line-length: 30;
    --sidebar-scale: 10;
    --content-width: calc(var(--line-length) * 1em);
    --sidebar-width: calc(var(--sidebar-scale) * 1em);
    --width-1: calc(var(--line-length) + 3);
    --width-2: calc(var(--line-length) + var(--sidebar-scale) + 5);
    --width-3: calc(var(--line-length) + 2 * var(--sidebar-scale) + 7);
    --tiny-breakpoint: calc(var(--width-1) * var(--min-text-size));
    --small-breakpoint: calc(var(--width-2) * var(--min-text-size));
    --medium-breakpoint: calc(var(--width-3) * var(--min-text-size));
    --large-breakpoint: calc(var(--width-3) * var(--max-text-size));
  }

  $min-math-size: 12px;
  $min-text-size: 15px;
  $max-text-size: 22px;
  $line-length: 30;
  $sidebar-scale: 10;
  $width-1: $line-length + 3;
  $width-2: $line-length + $sidebar-scale + 5;
  $width-3: $line-length + 2 * $sidebar-scale + 7;
  $tiny-breakpoint: $width-1 * $min-text-size;
  $small-breakpoint: $width-2 * $min-text-size;
  $medium-breakpoint: $width-3 * $min-text-size;
  $large-breakpoint: $width-3 * $max-text-size;

  html {
    box-sizing: border-box;
    background: none;
    font-family: var(--main-font);
  }

  *,
  *:before,
  *:after {
    box-sizing: inherit;
  }

  body {
    display: flex;
    justify-content: center;
    margin: 0;
    line-height: 1.4;
    width: 100%;
  }

  #container {
    display: flex;
    font-size: $max-text-size;
    margin: 1em;
    padding: 0;
    gap: 2em;
    // width: 100%;
  }

  nav {
    height: 100%;
    flex-grow: 1;
    overflow-y: auto;
    width: var(--sidebar-width);
    position: fixed;
    // width: 100%;
    // padding-right: 1em;
    // margin-right: 0.5em;
    > * {
      // font-size: 0.75em;
      // margin-right: 0.5em;
    }
  }

  #sidebar-placeholder {
    width: var(--sidebar-width);
    flex-shrink: 0;
  }

  main {
    align-content: start;
    display: grid;
    gap: 0 2em;
    grid-template-columns: var(--content-width) var(--sidebar-width);
    > :not(aside) {
      grid-column: 1;
    }
  }

  p:has(> .katex:only-child) {
    display: flex;
    justify-content: center;
  }

  .katex {
    font-size: 1em;
  }
  .katex {
    .mathnormal,
    .mathrm,
    .custom-Regular,
    .amsrm {
      font-family: var(--main-font);
    }
  }

  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }

  h1 {
    margin-top: 0;
  }

  p {
    margin-top: 0;
  }

  a {
    text-decoration: none;
    color: #000;
  }

  nav > ol,
  .toc {
    margin-top: 0;
    padding-left: 0em;
    counter-reset: item;
    li {
      // text-align: left;
      display: block;
      padding-left: 2em;
      text-indent: 0em;
      position: relative;
      &:before {
        content: counter(item) ". ";
        counter-increment: item;
        width: 2em;
        position: absolute;
        left: 0;
        // display: inline-block;
      }
    }
    li.current {
      font-weight: 700;
    }
  }

  nav > ol {
    font-size: 0.75em;
  }

  ul {
    margin-top: 0;
  }

  aside {
    font-size: 0.75em;
  }

  // Directives

  .stmt,
  .soln {
    border: solid #ccd8 1px;
    border-width: 1px 1px 1px 3px;
    padding: 0.3em 0.5em;
    margin-bottom: 1em;
    margin-left: -0.5em;
    margin-right: -0.5em;
    margin-top: 0;

    // + .soln {
    //   border-width: 0px 1px 1px 3px;
    //   margin-top: -1em;
    // }
  }

  .stmt + .soln,
  .soln + .soln {
    border-width: 0px 1px 1px 3px;
    margin-top: -1em;
  }

  .stmt:has(+ .soln) {
  }

  .stmt > * {
    margin-bottom: 0.5em;
  }

  .stmt > *:last-child {
    margin-bottom: 0.25em;
  }

  .soln > summary {
    cursor: pointer;
  }

  aside {
    border-top: solid #ccd 1px;
    opacity: 0.75;
    padding-top: 0.25em;
    font-size: 0.75em;
  }

  /* Three columns, variable size. */
  @media screen and (max-width: $large-breakpoint) {
    body {
      background: #d0ffd0;
    }

    #container {
      font-size: calc(100vw / $width-3);
      width: 100%;
    }
  }

  /* Two columns, variable size. */
  @media screen and (max-width: $medium-breakpoint) {
    body {
      background: #f0f0ff;
    }

    #container {
      font-size: calc(100vw / $width-2);
      // flex-direction: row;
    }

    nav {
      //   ◊; position: fixed;
    }

    main {
      grid-template-columns: minmax(0, 1fr);
      //   ◊; margin-left: calc(var(--sidebar-width) + 2em);
    }

    // ◊; Insert asides into main content.
    aside {
      grid-column: 1;
      > p {
        position: inherit;
      }
    }
  }

  @media screen and (max-width: $small-breakpoint) {
    body {
      background: #c0f0ff;
    }

    #container {
      font-size: calc(100vw / $width-1);
      flex-direction: column;
      width: auto;
    }

    nav {
      position: relative;
      width: auto;
    }
    #sidebar-placeholder {
      display: none;
    }

    main {
      margin-left: 0;
    }
  }

  @media screen and (max-width: $tiny-breakpoint) {
    #container {
      font-size: $min-text-size;
    }
    body {
      background: #fff0f0;
    }
  }
</style>
